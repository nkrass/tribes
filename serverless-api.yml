service: api3bs
useDotenv: true

provider:
  name: aws
  runtime: nodejs16.x
  architecture: arm64
  memorySize: 1536
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'ap-southeast-1'}
  timeout: 30
  environment:
    SERVICE: ${self:service}
    STAGE: ${self:provider.stage}
    REGION: ${self:provider.region}
    NO_COLOR: ${env:NO_COLOR, 'true'}
    NODE_ENV: ${opt:stage, self:provider.stage}
    JWT_SECRET: ${env:JWT_SECRET}
    GOOGLE_CLIENT_EMAIL: ${env:GOOGLE_CLIENT_EMAIL}
    GOOGLE_PRIVATE_KEY: ${env:GOOGLE_PRIVATE_KEY}
  apiGateway:
    shouldStartNameWithService: true
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:BatchWriteItem
            - dynamodb:BatchGetItem
          Resource: arn:aws:dynamodb:${self:provider.region}:*:*
functions:
  server:
    # handler: apps/api/src/index.handler
    handler: dist/apps/api/index.handler
    events:
      - http:
          cors: true
          path: '{proxy+}'
          method: any
    environment:
      NODE_ENV: production

plugins:
  - serverless-dotenv-plugin
  - serverless-apigw-binary
  - serverless-api-cloudfront
  # - serverless-plugin-warmup
  - serverless-dynamodb-local
  - serverless-offline

# remove the unnecessary packages to keep small upload size
package:
  exclude:
    - node_modules/**
    - .angular/**
    - .vscode/**
    - tools/**
    - ./.yarnclean
    - ./angular.json
    - ./handler.js
    - package.json
    - README.md
    - tsconfig.*
    - .dynamodb/**
    - '@types/**'
    - apps/**
    - libs/**
    - tools
    - ./.editorconfig
    - ./.eslint*
    - ./.prett*
    - ./decorate*
    - ./graphql.schema.json
    - ./jest.config.js
    - ./jest.preset.js
    - ./migrations.json
    - ./nx.json
    - ./serverless*
    - ./shared-local*
    - ./webpack*
    - ./yarn.lock
    - ./yc-proxy.js
  # individually: true
  # exclude:
  #   - .git/**
  #   - src/**
  #   - tests/**
  #   - nodemon.json
  #   - README.md
  #   - node_modules/typescript/**
  #   - node_modules/@types/**
  #   - node_modules/.cache/**
  #   - cypress/**
  #   - ./*.e2e.*
  # excludeDevDependencies: true
  # individually: true
  # patterns:  
  #   - '!node_modules/.bin/**'
  #   - '!node_modules/.cache/**'
  #   - '!node_modules/**/README*'
  #   - '!node_modules/**/readme*'
  #   - '!node_modules/**/Readme*'
  #   - '!node_modules/**/LICENSE*'
  #   - '!node_modules/**/License*'
  #   - '!node_modules/**/license*'
  #   - '!node_modules/**/Test/**'
  #   - '!node_modules/**/TEST/**'
  #   - '!node_modules/**/aws-sdk/**'
  #   - '!node_modules/aws-sdk/**'
  #   - '!node_modules/@angular/**'
  #   - '!node_modules/@angular-devkit/**'
  #   - '!node_modules/@babel/**'
  #   - '!node_modules/browserify*/**'
  #   - '!node_modules/**/*.css'
  #   - '!node_modules/**/example*/**'
  #   - '!node_modules/**/Example*/**'
  #   - '!node_modules/**/EXAMPLE*/**'
  #   - '!node_modules/**/History*'
  #   - '!node_modules/**/History*'
  #   - '!node_modules/**/HISTORY*'
  #   - '!node_modules/**/Changelog*'
  #   - '!node_modules/**/changelog*'
  #   - '!node_modules/**/CHANGELOG*'
  #   - '!node_modules/**/CHANGES*'
  #   - '!node_modules/**/Changes*'
  #   - '!node_modules/**/changes*'
  #   - '!node_modules/**/Makefile*'
  #   - '!node_modules/**/makefile*'
  #   - '!node_modules/**/SECURITY*'
  #   - '!node_modules/**/Security*'
  #   - '!node_modules/**/security*'
  #   - '!node_modules/**/types.d.ts'
  #   - '!node_modules/**/*.ts'
  #   - '!.vscode/**'
  #   - '!e2e/**'
  #   - '!ux-testing/**'
  #   - '!.gitignore'
  #   - '!angular.json'
  #   - '!README.md'
  #   - '!karma.conf.js'
  #   - '!protractor.conf.js'
  #   - '!rename_images.js'
  #   - '!SECURITY.md'
  #   - '!server.ts'
  #   - '!tsconfig.json'
  #   - '!tslint.json'
  #   - '!.cache/**'
  #   - '!.gitattributes'
  #   - '!.yarnclean'
  #   - '!.DS_Store'
  #   - '!tsconfig.base.json'
  #   - '!package.json'
  #   - '!package-lock.json'
  #   - '!browserlist'
  #   - '!credentials.json'
  #   - '!*.ts'
  #   - '!*.txt'
  #   - '!*.mjs'

custom:
  # serverlessPluginTypescript:
  #   tsConfigFileLocation: './apps/api/tsconfig.app.json'
  # webpack:
  #   webpackConfig: 'webpack.config.js'
  #   packager: yarn
  #   excludeFiles: '**/*test*'
  #   includeModules:
  #       forceExclude:
  #           - 'aws-sdk'
  #   keepOutputDirectory: true
  #   concurrency: 1
    # packExternalModulesMaxBuffer: 204800 
  # bundle:
  #   concurrency: 5
  #   linting: false
  #   disableForkTsChecker: true
  #   packager: yarn
  #   stats: true
  #   generateStatsFiles: true
  #   # tsConfig: "tsconfig.json"
  #   externals: 
  #     - '@nestjs/*'
  #     - 'apollo-server-express'
  #   forceInclude:                   # Optional list of NPM packages that need to be included
  #     - '@apollo'
  #     - '@apollographql'
  #     - '@nestjs'
  #     - 'ws'
    # packExternalModulesMaxBuffer: 204800
  apigwBinary: # Library to add support for api gateway binary types
    types:
      - '*/*'
  apiCloudFront:
    domain: api.3bs.store
    basePath: prod
    certificate: arn:aws:acm:us-east-1:221183097270:certificate/a63e96d1-cd28-45a1-8960-c5a9f740d59c
    compress: true
    cookies: none
    headers:
      # - x-api-key
      - Accept
      - Authorization
    querystring: all
    priceClass: PriceClass_All
    minimumProtocolVersion: TLSv1.2_2018
  # warmup:
  #   default:
  #     enabled: true # Whether to warm up functions by default or not
  #     folderName: '.warmup' # Name of the folder created for the generated warmup 
  #     cleanFolder: false
  #     memorySize: 256
  #     name: warmer-default
  #     role: IamRoleLambdaExecution
  #     tags:
  #       Project: tribes_api
  #       Owner: tribes_llc
  #     vpc: false
  #     events:
  #       - schedule: 'cron(0/3 1-23 ? * MON-FRI *)' # Run WarmUp every 5 minutes Mon-Fri between 8:00am and 5:55pm (UTC)
  #     package:
  #       individually: true
  #       #exclude: # exclude additional binaries that are included at the serverless package level
  #       #  - ../**
  #       #  - ../../**
  #       #include:
  #       #  - ./**
  #     timeout: 20
  #     tracing: false
  #     prewarm: true # Run WarmUp immediately after a deploymentlambda
  #     #clientContext:
  #     #  source: serverless-plugin-warmup
  #     #  other: '20'
  #     #payload: 
  #     #  source: serverless-plugin-warmup
  #     #  other: 20
  #     #payloadRaw: true # Won't JSON.stringify() the payload, may be necessary for Go/AppSync deployments
  #     concurrency: 1 # Warm up 5 concurrent instances

  dynamodb:
    stages:
      - ${self:provider.stage}
    start:
      port: 8000
      inMemory: false
      dbPath: './'
      migrate: true
      seed: false

resources:
  - ${file(apps/api/resource/dynamodb.yml)}
