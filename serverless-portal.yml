service: portal3bs
useDotenv: true

provider:
  name: aws
  runtime: nodejs16.x
  architecture: arm64
  memorySize: 1536
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'ap-southeast-1'}
  timeout: 30
  environment:
    SERVICE: ${self:service}
    STAGE: ${self:provider.stage}
    REGION: ${self:provider.region}
    NO_COLOR: ${env:NO_COLOR, 'true'}
    NODE_ENV: ${opt:stage, self:provider.stage}
    JWT_SECRET: ${env:JWT_SECRET}
    GOOGLE_CLIENT_EMAIL: ${env:GOOGLE_CLIENT_EMAIL}
    GOOGLE_PRIVATE_KEY: ${env:GOOGLE_PRIVATE_KEY}
  apiGateway:
    shouldStartNameWithService: true
functions:
  server:
    # handler: dist/apps/portal/index.handler
    handler: handler.handler
    events:
      - http:
          cors: true
          path: '/'
          method: any
      - http:
          cors: true
          path: '/{proxy+}'
          method: any

plugins:
  - serverless-dotenv-plugin
  - serverless-apigw-binary
  - serverless-api-cloudfront
  # - serverless-plugin-warmup
  - serverless-offline

# remove the unnecessary packages to keep small upload size
package:
  exclude:
    - '!dist/apps/api/**'
    - './dist/apps/api/**'
    # - '!dist/apps/portal/server/**'
    # - 'dist/apps/portal/server/**'
    - '!node_modules/**'
    - 'node_modules/**'
    - '.angular/**'
    - '.vscode/**'
    - 'tools/**'
    - './.yarnclean'
    - './angular.json'
    - 'package.json'
    - 'README.md'
    - 'tsconfig.*'
    - '.dynamodb/**'
    - '@types/**'
    - 'apps/**'
    - 'libs/**'
    - 'tools'
    - './.editorconfig'
    - './.eslint*'
    - './.prett*'
    - './decorate*'
    - './graphql.schema.json'
    - './jest.config.js'
    - './jest.preset.js'
    - './migrations.json'
    - './nx.json'
    - './serverless*'
    - './shared-local*'
    - './webpack*'
    - './yarn.lock'
    - './yc-proxy.js'
  include:
    - 'node_modules/@vendia/serverless-express/**'

custom:
  apigwBinary: # Library to add support for api gateway binary types
    types:
      - '*/*'
  serverless-offline:
    httpPort: 4200
  apiCloudFront:
    domain: 3bs.store
    basePath: prod
    certificate: arn:aws:acm:us-east-1:221183097270:certificate/a63e96d1-cd28-45a1-8960-c5a9f740d59c
    compress: true
    cookies: none
    headers:
      # - x-api-key
      - Accept
      - Authorization
    querystring: all
    priceClass: PriceClass_All
    minimumProtocolVersion: TLSv1.2_2018
  # warmup:
  #   default:
  #     enabled: true # Whether to warm up functions by default or not
  #     folderName: '.warmup' # Name of the folder created for the generated warmup 
  #     cleanFolder: false
  #     memorySize: 256
  #     name: warmer-default
  #     role: IamRoleLambdaExecution
  #     tags:
  #       Project: tribes_api
  #       Owner: tribes_llc
  #     vpc: false
  #     events:
  #       - schedule: 'cron(0/3 1-23 ? * MON-FRI *)' # Run WarmUp every 5 minutes Mon-Fri between 8:00am and 5:55pm (UTC)
  #     package:
  #       individually: true
  #       #exclude: # exclude additional binaries that are included at the serverless package level
  #       #  - ../**
  #       #  - ../../**
  #       #include:
  #       #  - ./**
  #     timeout: 20
  #     tracing: false
  #     prewarm: true # Run WarmUp immediately after a deploymentlambda
  #     #clientContext:
  #     #  source: serverless-plugin-warmup
  #     #  other: '20'
  #     #payload: 
  #     #  source: serverless-plugin-warmup
  #     #  other: 20
  #     #payloadRaw: true # Won't JSON.stringify() the payload, may be necessary for Go/AppSync deployments
  #     concurrency: 1 # Warm up 5 concurrent instances
  
